#Importering av olika biblotek

import pygame
import random
import os
import time
import sys

#Initierar Pygame
pygame.init()

#Skärmstorlek och färgdefinitioner
WIDTH, HEIGHT = 800, 600
SCREEN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Blackjack")

#Färgdefinitioner
WHITE = (255, 255, 255)
GREEN = (0, 128, 0)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

#Fontinställningar
FONT = pygame.font.Font(None, 36)

#Sökväg till mappen med kortgrafik
CARD_FOLDER = "graphics"

#Klass för att representera ett spelkort
class Card:
    def __init__(self, suit, value):
        self.suit = suit
        self.value = value

#Klass för att representera en kortlek
class Deck:
    def __init__(self):
        self.cards = []
#Skapar kortleken för varje färg och värde
        for suit in ['Hearts', 'Diamonds', 'Clubs', 'Spades']:
            for value in range(2, 11):
                self.cards.append(Card(suit, str(value).zfill(2)))
            for value in ['J', 'Q', 'K', 'A']:
                self.cards.append(Card(suit, value))
        random.shuffle(self.cards)

    def draw_card(self):
#Drar ett kort från kortleken
        return self.cards.pop()

#Klass för att representera en spelare
class Player:
    def __init__(self, name, balance=1000):
        self.name = name
        self.hand = []
        self.balance = balance
        self.bet_amount = 0

    def add_card(self, card):
#Lägger till ett kort till spelarens hand
        self.hand.append(card)

    def calculate_hand_value(self):
#Beräknar värdet av spelarens hand
        total = 0
        num_aces = 0
        for card in self.hand:
            if card.value.isdigit():
                total += int(card.value)
            elif card.value in ['J', 'Q', 'K']:
                total += 10
            else:
                num_aces += 1
                total += 11 
        while total > 21 and num_aces:
            total -= 10  
            num_aces -= 1
        return total

    def clear_hand(self):
#Rensar spelarens hand
        self.hand = []

    def add_balance(self, amount):
#Lägger till ett belopp till spelarens hand
        self.balance += amount

    def deduct_balance(self, amount):
#Drar ett belopp från spelarens balans
        self.balance -= amount

    def set_bet(self, bet):
#Ställer in spelarens bet-belopp
        self.bet_amount = bet

#Funktion för att rita text på skärmen
def draw_text(text, color, x, y):
    text_surface = FONT.render(text, True, color)
    SCREEN.blit(text_surface, (x, y))

#Funktion för att rita spelarens kort på skärmen
def draw_cards(player, x, y, hidden=False):
    for i, card in enumerate(player.hand):
        if hidden and i == 0:
            card_image = pygame.image.load(os.path.join(CARD_FOLDER, "cardextras", "card_back.png"))
        else:
            if card.value.isdigit() and card.value != '10':
                value = card.value.zfill(2)
            else:
                value = card.value.lower()
            card_image = pygame.image.load(os.path.join(CARD_FOLDER, card.suit.lower(), f"card_{card.suit.lower()}_{value}.png"))
        card_image = pygame.transform.scale(card_image, (100, 150))
        SCREEN.blit(card_image, (x + i * 110, y))

#Funktion för att rita spelarens balans på skärmen
def draw_balance(player):
    pygame.draw.rect(SCREEN, GREEN, (50, 550, 200, 50))
    draw_text(f"Balance: ${player.balance}", BLACK, 50, 550)

#Fumtion för att rita bet-knapparna på skärmen
def draw_bet_buttons():
    pygame.draw.rect(SCREEN, WHITE, (500, 450, 100, 50))
    draw_text("100%", BLACK, 520, 460)
    pygame.draw.rect(SCREEN, WHITE, (630, 450, 100, 50))
    draw_text("50%", BLACK, 650, 460)
    pygame.draw.rect(SCREEN, WHITE, (500, 510, 100, 50))
    draw_text("25%", BLACK, 520, 520)
    pygame.draw.rect(SCREEN, WHITE, (630, 510, 100, 50))
    draw_text("10%", BLACK, 650, 520)

#Funktion för att få spelarens val av bet
def get_bet_choice():
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    mouse_pos = event.pos
                    if 500 <= mouse_pos[0] <= 600 and 450 <= mouse_pos[1] <= 500:
                        return 1
                    elif 630 <= mouse_pos[0] <= 730 and 450 <= mouse_pos[1] <= 500:
                        return 0.5
                    elif 500 <= mouse_pos[0] <= 600 and 510 <= mouse_pos[1] <= 560:
                        return 0.25
                    elif 630 <= mouse_pos[0] <= 730 and 510 <= mouse_pos[1] <= 560:
                        return 0.1

#Huvudfunktion för spelet
def game(player):
    while True:
        running = True
        deck = Deck()
        dealer = Player("Dealer")

#Rensar spelarens och dealerns händer
        player.clear_hand()
        dealer.clear_hand()

        SCREEN.fill(GREEN) 

        draw_balance(player)
        draw_bet_buttons()

        pygame.display.update()

#Sätter spelarens bet baseras på deras val
        player.set_bet(player.balance * get_bet_choice())

#Drar två kort vardera till spelaren och dealern
        player.add_card(deck.draw_card())
        dealer.add_card(deck.draw_card())
        player.add_card(deck.draw_card())
        dealer.add_card(deck.draw_card())

        player_total = player.calculate_hand_value()
        dealer_total = dealer.calculate_hand_value()

        if player_total > 21 or dealer_total > 21:
            running = False

        reveal_dealer_card = False
        player_stood = False

        while running:
            SCREEN.fill(GREEN)

            draw_text("Dealer's Hand:", BLACK, 50, 50)
            draw_cards(dealer, 50, 100, hidden=not reveal_dealer_card)

            draw_text("Your Hand:", BLACK, 50, 300)
            draw_cards(player, 50, 350)

            player_total = player.calculate_hand_value()

            draw_text(f"Your Total: {player_total}", BLACK, 50, 500)

            draw_balance(player)  

            if player_total > 21:
                player.deduct_balance(player.bet_amount)  
                draw_text("BUST!", RED, 350, 500)
                pygame.display.update()
                pygame.time.delay(2000)
                running = False

            if not player_stood:
                hit_button = pygame.Rect(600, 300, 150, 50)
                pygame.draw.rect(SCREEN, WHITE, hit_button)
                draw_text("Hit", BLACK, 625, 310)

                stand_button = pygame.Rect(600, 400, 150, 50)
                pygame.draw.rect(SCREEN, WHITE, stand_button)
                draw_text("Stand", BLACK, 615, 410)

                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        sys.exit()
                    elif event.type == pygame.MOUSEBUTTONDOWN:
                        if event.button == 1:
                            mouse_pos = event.pos
                            if hit_button.collidepoint(mouse_pos):
                                player.add_card(deck.draw_card())
                            elif stand_button.collidepoint(mouse_pos):
                                reveal_dealer_card = True
                                player_stood = True
            else:
                reveal_dealer_card = True
                dealer_total = dealer.calculate_hand_value()
                if dealer_total < 17:
                    dealer.add_card(deck.draw_card())
                    pygame.time.delay(500)
                else:
                    pygame.time.delay(1000)
                    break

            pygame.display.update()

        if player_total <= 21:
            dealer_total = dealer.calculate_hand_value()
            if dealer_total > 21:
                player.add_balance(player.bet_amount)  
                draw_text("Dealer busts. Player wins!", BLACK, 350, 500)
            elif player_total == 21 and len(player.hand) == 2:
                player.add_balance(player.bet_amount * 1.5)  
                draw_text("Player has a natural blackjack. Player wins!", BLACK, 250, 500)
            elif player_total > dealer_total:
                player.add_balance(player.bet_amount)  
                draw_text("Player wins!", BLACK, 350, 500)
            elif player_total == dealer_total:
                draw_text("It's a tie!", BLACK, 350, 500)
            else:
                player.deduct_balance(player.bet_amount)  
                draw_text("Dealer wins!", BLACK, 350, 500)

            pygame.display.update()
            pygame.time.delay(2000)

        draw_balance(player)  

        pygame.display.update()

        if player.balance <= 0:
            draw_text("You lost!", RED, 350, 50)
            pygame.display.update()
            pygame.time.delay(2000)
            pygame.quit()
            sys.exit()

        start_time = pygame.time.get_ticks()
        while pygame.time.get_ticks() - start_time < 5000:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
        pygame.event.clear()

#Huvudfunktion som startar spelet
def main():
    player = Player("Player")
    while True:
        game(player)

if __name__ == "__main__":
    main()
